#domain

üìå Prop√≥sito: Define el n√∫cleo del negocio. Contiene las entidades de negocio, modelos de dominio y las interfaces (contratos) que describen las operaciones disponibles. No contiene detalles de implementaci√≥n de fuentes de datos ni de frameworks espec√≠ficos.

üìë Contenido:

model/: Clases y objetos que representan conceptos de dominio. Actualmente solo AuthOperationResult.kt, un sealed class que modela los posibles resultados de operaciones de autenticaci√≥n (√©xito, error, estado de carga, etc.).

repository/: Interfaces de repositorio. AuthRepository.kt define los m√©todos de negocio relacionados con autenticaci√≥n (por ejemplo, signIn, signOut, getCurrentUser).

use_case/: Contiene la l√≥gica de los casos de uso de negocio. Cada clase en esta capa representa una acci√≥n de la aplicaci√≥n (por ejemplo, iniciar sesi√≥n, obtener usuario actual) y coordina las operaciones necesarias en los repositorios para completar esa acci√≥n. Act√∫a como mediador entre la capa de datos y la de presentaci√≥n.

README.md: Introducci√≥n a la capa de dominio, su prop√≥sito y estructura.

üèóÔ∏è Rol en la arquitectura: Es la capa central (c√≠rculo interno) de Clean Architecture. Aqu√≠ es donde se describe qu√© hace la aplicaci√≥n sin preocuparse de c√≥mo se hace. Esta capa no debe depender de data ni de frameworks externos; solo puede usar core para utilidades gen√©ricas.

Ejemplo de uso: AuthRepository declara funciones como suspend fun signIn(email: String, password: String): AuthOperationResult. AuthRepositoryImpl en la capa de datos implementa esta interfaz y devuelve un AuthOperationResult para el dominio. Un caso de uso como SignInUseCase invoca repository.signIn() y devuelve el modelo de dominio correspondiente.espondiente.