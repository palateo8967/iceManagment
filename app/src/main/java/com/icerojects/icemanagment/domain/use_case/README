#domain/use_case

üìå Prop√≥sito: Contiene la l√≥gica de los casos de uso de negocio. Cada clase en esta capa representa una acci√≥n de la aplicaci√≥n (por ejemplo, iniciar sesi√≥n, obtener usuario actual) y coordina las operaciones necesarias en los repositorios para completar esa acci√≥n. Act√∫a como mediador entre la capa de datos y la de presentaci√≥n.

üìë Contenido:

GetAuthStateUseCase.kt: Caso de uso que probablemente monitorea el estado de autenticaci√≥n (usuario activo/inactivo).

GetCurrentUserUseCase.kt: Recupera informaci√≥n del usuario actualmente autenticado.

SignInUseCase.kt: Maneja el proceso de inicio de sesi√≥n (invoca repositorio, procesa resultado).

SignOutUseCase.kt: Gestiona el cierre de sesi√≥n.

SignUpUseCase.kt: Maneja el registro de nuevos usuarios.

README.md: Descripci√≥n general de los casos de uso existentes.

üèóÔ∏è Rol en la arquitectura: Esta capa implementa las reglas de negocio de alto nivel. Los casos de uso reciben par√°metros (como credenciales) desde la UI o ViewModel, llaman a los m√©todos correspondientes del repositorio (dominio) y devuelven los resultados al ViewModel. Con esto se asegura que la UI no llame directamente a la capa de datos.

Ejemplo de uso: En AuthViewModel, al pulsar un bot√≥n de inicio de sesi√≥n se llama a signInUseCase(email, password). Internamente, SignInUseCase usa AuthRepository para autenticar y retorna un AuthOperationResult, que el ViewModel observa y pasa a la pantalla.