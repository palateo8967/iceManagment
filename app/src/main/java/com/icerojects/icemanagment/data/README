#data

üìå Prop√≥sito: Gestiona las fuentes de datos de la aplicaci√≥n. Incluye la l√≥gica para obtener, guardar y sincronizar datos tanto desde medios locales (p. ej. base de datos SQLite/Room) como remotos (servicios web, Firebase). Tambi√©n alberga las implementaciones concretas de los repositorios definidos en el dominio.

üìë Contenido:

local/: Carpeta para la persistencia local. Aqu√≠ deber√≠an ir las entidades de Room, DAOs y dem√°s clases relacionadas con la base de datos o el almacenamiento en cach√©. Actualmente est√° vac√≠a, pero se prev√© usarla para futuros m√≥dulos (Room, SharedPreferences, etc.).

remote/: Carpeta para fuentes de datos remotas. Incluye subcarpetas:

auth/: Contiene FirebaseAuthManager.kt, que maneja la autenticaci√≥n mediante Firebase Auth.

firestore/: Contiene FirestoreManager.kt, encargado de las operaciones con Firestore (lectura/escritura de datos de usuario, pedidos, etc.).

repository/: Contiene implementaciones de repositorios. Actualmente solo AuthRepositoryImpl.kt, que implementa la interfaz AuthRepository del dominio. Este repositorio combina los datos de FirebaseAuthManager y FirestoreManager para cumplir las operaciones de negocio.

README.md: Documento que describe la capa de datos.

üèóÔ∏è Rol en la arquitectura: Esta es la capa externa donde se implementan los detalles de acceso a datos. Los repositorios aqu√≠ traducen las llamadas del dominio a operaciones concretas de la fuente de datos (por ejemplo, llamar a Firebase). Act√∫a como puente entre el dominio y el mundo externo.

Ejemplo de uso: AuthRepositoryImpl.signIn(email, password) llama internamente a FirebaseAuthManager.signInWithEmail(email, password) y luego a FirestoreManager.getUserData(), combinando ambas fuentes para retornar un AuthOperationResult.