# di

Contiene todos los m√≥dulos de inyecci√≥n de dependencias (por ejemplo, Hilt).

Aqu√≠ se definen los `@Module` y `@Provides` necesarios para inyectar dependencias en las capas data, domain y ui.

________________________________________________________________________________________________________________
.

üèóÔ∏è Rol en la arquitectura: di act√∫a como ensamblador del sistema. Cumple el principio de inversi√≥n de dependencias al vincular interfaces (del dominio) con implementaciones (del data). Mantiene la capa de presentaci√≥n desacoplada de los detalles de creaci√≥n de objetos.

Ejemplo de uso: En AuthModule se anotan proveedores como @Provides fun provideAuthRepository(...): AuthRepository = AuthRepositoryImpl(...). Luego, Hilt inyecta ese AuthRepository en los casos de uso o ViewModels seg√∫n se requiera.

üìë Contenido:

AuthModule.kt: M√≥dulo de Hilt que proporciona dependencias relacionadas con la autenticaci√≥n, como instancias de AuthRepositoryImpl, los casos de uso de autenticaci√≥n (SignInUseCase, etc.) y quiz√° FirebaseAuthManager. Se puede ampliar m√°s tarde con nuevos m√≥dulos (e.g. NetworkModule, DatabaseModule).

M√≥dulos (@Module)
Son clases especiales donde se definen las reglas de c√≥mo crear y proveer dependencias.

Siempre van acompa√±adas de @InstallIn(...) para definir el alcance (lifetime).

Dentro de cada m√≥dulo se usan funciones con @Provides para explicar c√≥mo construir una clase, Basicamente
dice cuando alguien necesite un AuthRepository, entregale un AuthRepositoryImpl

Scopes (alcances de vida)
Con Hilt pod√©s controlar cu√°nto vive una instancia:

@Singleton ‚Üí Una sola instancia para toda la app.

@ActivityScoped ‚Üí Vive mientras viva una Activity.

@ViewModelScoped ‚Üí Vive mientras viva un ViewModel.



